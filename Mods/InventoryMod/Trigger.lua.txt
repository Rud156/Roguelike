local mod = {}

local COLLECTIBLES_TABLE = {
    _Collectible_Boots_Of_Speed = {
        itemName = "_Collectible_Boots_Of_Speed",
        itemImage = "icon_enhance_frosttower_tempestaura",
        itemStackable = -1,
        itemType = 0,
        itemBehaviourName = "_Collectible_Boots_Of_Speed",
        itemDescription = "Increases the movement speed of the Hero by 30% when placed in inventory. Boots of Speed do not stack. Two boots of speed will make a Hero just as fast as one"           
    },
    _Collectible_Hammer_Of_Attack = {
        itemName = "_Collectible_Hammer_Of_Attack",
        itemImage = "icon_enhance_crusader_blessed_hammer",
        itemStackable = -1,
        itemType = 0,
        itemBehaviourName = "_Collectible_Hammer_Of_Attack",
        itemDescription = "Increases the light attack damage of the Hero by 50% when placed in inventory. Hammer of Attack does not stack. Two Hammer of Attack will still make a Heroâ€™s light attack deals 50% more damage"
    },
    _Collectible_Helm_Of_Valor = {
        itemName = "_Collectible_Helm_Of_Valor",
        itemImage = "icon_enhance_lighthouse_guardian",
        itemStackable = -1,
        itemType = 0,
        itemBehaviourName = "_Collectible_Helm_Of_Valor",
        itemDescription = "When placed in the inventory and active, Helm of Valor will block 1 incoming attack for the Hero. After blocking the damage, Helm of Valor will become inactive, becoming active after 10 seconds"
    },
    _Collectible_Potion = {
        itemName = "_Collectible_Potion",
        itemImage = "icon_catalyst_main_item5_orange_02",
        itemStackable = 2,
        itemType = 1,
        itemDescription = "Consume to instantly regenerate 50 HP",
        itemBehaviourName = "_Collectible_Potion",
        itemPotionHealth = 50
    },
    _Collectible_Bomb = {
        itemName = "_Collectible_Bomb",
        itemImage = "icon_gear_bomb_01",
        itemStackable = 2,
        itemType = 1,
        itemDescription = "Place a bomb that will explode 2 seconds after placement from where the Hero is standing. Bomb explosion will deal 30 damage in a radius of 1",
        itemBombName = "_Collectible_Bomb_Unit"
    }
}

-- Item  Type
-- -1: Empty
-- 0: Gear
-- 1: Consumable
local InventorySlot = { 
    emptyItemImage = "", 

    itemType = 0,
    itemName = "",
    itemDescription = "",

    stackability = -1,
    currentStack = -1,
    
    inventoryBackground = nil,
    inventoryIcon = nil,
    slotDropButton = nil,
    stackCounter = nil,
    slotRecharge = nil,

    isSlotRechargeActive = false,
    maxRechargeTime = 0,
    currentRechargeTime = 0
}
InventorySlot.__index = InventorySlot
function InventorySlot:new(emptyItemImage, backgroundImage, uiParent, slotClickedFunction, slotDropFunction)
    local inventory = {}
    setmetatable(inventory, InventorySlot)

    local slotItem = DCEI.NewButton(uiParent)
    DCEI.SetMinSize(slotItem, 75, 75)
    DCEI.SetMaxSize(slotItem, 100, 100)
    DCEI.SetBackgroundImage(slotItem, backgroundImage)

    local inventoryIcon = DCEI.NewFrame(slotItem)
    DCEI.SetMinSize(inventoryIcon, 70, 70)
    DCEI.SetBackgroundImage(inventoryIcon, emptyItemImage)

    local slotRecharge = DCEI.NewFrame(slotItem)
    DCEI.SetMinSize(slotRecharge, 95, 95)
    DCEI.SetBackgroundImage(slotRecharge, "ui_squareround")
    DCEI.SetVerticalOffsetInParent(slotRecharge, 2)
    DCEI.SetBackgroundImageColor(slotRecharge, 0, 0, 0, 0)

    local slotDropButton = DCEI.NewButton(slotItem)
    DCEI.SetMinSize(slotDropButton, 20, 20)
    DCEI.SetBackgroundImage(slotDropButton, "ui_cross")
    DCEI.SetTopAlignmentInParent(slotDropButton)
    DCEI.SetRightAlignmentInParent(slotDropButton)
    DCEI.SetHorizontalOffsetInParent(slotDropButton, 14)
    DCEI.SetVerticalOffsetInParent(slotDropButton, 20)
    DCEI.SetBackgroundImageColor(slotDropButton, 0, 0, 0, 0)

    local stackCounter = DCEI.NewText(slotItem)
    DCEI.SetMinSize(stackCounter, 20, 20)
    DCEI.SetBottomAlignmentInParent(stackCounter)
    DCEI.SetRightAlignmentInParent(stackCounter)
    DCEI.SetText(stackCounter, "")
    
    inventory.emptyItemImage = emptyItemImage
    
    inventory.itemType = -1
    inventory.itemName = itemName
    inventory.itemDescription = ""

    inventory.stackability = -1
    inventory.currentStack = -1

    inventory.inventoryBackground = slotItem
    inventory.inventoryIcon = inventoryIcon
    inventory.slotDropButton = slotDropButton
    inventory.stackCounter = stackCounter
    inventory.slotRecharge = slotRecharge

    DCEI.SetOnClickCallback(
        slotDropButton,
        function()
            slotDropFunction(inventory:GetInventoryItemName(), inventory)
        end
    )

    DCEI.SetOnClickCallback(
        slotItem,
        function()
            slotClickedFunction(inventory:GetInventoryItemName(), inventory)
        end
    )

    return inventory
end
function InventorySlot:SaveSlot(index)
    DCEI.Save.Set("Slot_" .. index .. "_Name", self.itemName)
    DCEI.Save.Set("Slot_" .. index .. "_Stack", self.currentStack)
    DCEI.Save.Set("Slot_" .. index .. "_RechargeActive", self.isSlotRechargeActive)
    DCEI.Save.Set("Slot_" .. index .. "_MaxRechargeTime", self.maxRechargeTime)
    DCEI.Save.Set("Slot_" .. index .. "_CurrentRechargeTime", self.currentRechargeTime)
    DCEI.Save.Commit()
end
function InventorySlot:LoadSlot(index)
    local itemName = DCEI.Save.Get("Slot_" .. index .. "_Name")
    local currentStack = DCEI.Save.Get("Slot_" .. index .. "_Stack")
    local isSlotRechargeActive = DCEI.Save.Get("Slot_" .. index .. "_RechargeActive")
    local maxRechargeTime = DCEI.Save.Get("Slot_" .. index .. "_MaxRechargeTime")
    local currentRechargeTime = DCEI.Save.Get("Slot_" .. index .. "_CurrentRechargeTime")


    if itemName ~= nil and itemName ~= "" and currentStack ~= -1 and currentStack ~= nil then
        local collectibleItem = COLLECTIBLES_TABLE[itemName]
        
        self:UpdateInventoryItem(
            itemName,
            collectibleItem.itemType,
            collectibleItem.itemDescription,
            
            collectibleItem.itemImage,
            
            collectibleItem.itemStackable,
            currentStack
        )

        self.isSlotRechargeActive = isSlotRechargeActive
        self.maxRechargeTime = maxRechargeTime
        self.currentRechargeTime = currentRechargeTime

        if isSlotRechargeActive then
            DCEI.SetBackgroundImageColor(self.slotRecharge, 0, 0, 0, 0.5)
        end
    end
end
function InventorySlot:ClearSlot(index)
    DCEI.Save.Set("Slot_" .. index .. "_Name", nil)
    DCEI.Save.Set("Slot_" .. index .. "_Stack", nil)
    DCEI.Save.Set("Slot_" .. index .. "_RechargeActive", nil)
    DCEI.Save.Set("Slot_" .. index .. "_MaxRechargeTime", nil)
    DCEI.Save.Set("Slot_" .. index .. "_CurrentRechargeTime", nil)
    DCEI.Save.Commit()
end
function InventorySlot:GetInventoryItemType()
    return self.itemType
end
function InventorySlot:GetInventoryItemName()
    return self.itemName
end
function InventorySlot:UseItem()
    if self.stackability ~= -1 then
        self.currentStack = self.currentStack - 1
        DCEI.SetText(self.stackCounter, "x " .. self.currentStack)

        if self.currentStack <= 0 then
            self:Clear()
        end

    else
        self:Clear()
    end
end
function InventorySlot:UpdateSlotRecharge(deltaTime)
    if not self.isSlotRechargeActive then
        return
    end

    self.currentRechargeTime = self.currentRechargeTime - deltaTime

    if self.currentRechargeTime <= 0 then
        self.isSlotRechargeActive = false
        DCEI.SetBackgroundImageColor(self.slotRecharge, 0, 0, 0, 0)
        
    else
        local rechargeRatio = self.currentRechargeTime / self.maxRechargeTime
        DCEI.SetBackgroundImageFillAmount(self.slotRecharge, rechargeRatio)
    end
end
function InventorySlot:ActivateInventorySlotRecharge(maxRechargeTime)
    self.isSlotRechargeActive = true
    self.maxRechargeTime = maxRechargeTime
    self.currentRechargeTime = maxRechargeTime

    DCEI.SetBackgroundImageColor(self.slotRecharge, 0, 0, 0, 0.5)
end
function InventorySlot:DeActivateInventorySlotRecharge()
    self.isSlotRechargeActive = false
    DCEI.SetBackgroundImageColor(self.slotRecharge, 0, 0, 0, 0)
end
function InventorySlot:UpdateInventoryItem(itemName, itemType, itemDescription, itemImage, stackability, currentStack)
    DCEI.LogMessage("Updating Inventory with new item")

    self.itemType = itemType
    self.itemName = itemName
    self.itemDescription = itemDescription

    self.stackability = stackability
    self.currentStack = currentStack

    if stackability ~= -1 then
        DCEI.SetText(self.stackCounter, "x " .. currentStack)
    else
        DCEI.SetText(self.stackCounter, "")
    end
    
    DCEI.SetBackgroundImage(self.inventoryIcon, itemImage)
    DCEI.SetBackgroundImageColor(self.slotDropButton, 1, 1, 1, 1)
end
function InventorySlot:StackInventoryItem()
    DCEI.LogMessage("Stacking Inventory")

    if self:IsSlotStackable() then
        self.currentStack = self.currentStack + 1
        DCEI.SetText(self.stackCounter, "x " .. self.currentStack)
    else
        DCEI.LogError("Inventory stack is full!!!")
    end
end
function InventorySlot:Clear()
    DCEI.SetBackgroundImage(self.inventoryIcon, self.emptyItemImage)
    
    self.itemType = -1
    self.itemName = ""
    self.itemDescription = ""

    self.stackability = -1
    self.currentStack = -1

    self.isSlotRechargeActive = false
    self.maxRechargeTime = 0
    self.currentRechargeTime = 0

    DCEI.SetBackgroundImageColor(self.slotRecharge, 0, 0, 0, 0)
    DCEI.SetBackgroundImageColor(self.slotDropButton, 0, 0, 0, 0)
    DCEI.SetText(self.stackCounter, "")
end
function InventorySlot:DropInventoryItem()
    if self.stackability ~= -1 then
        if self.currentStack > 1 then
            self.currentStack = self.currentStack - 1
            DCEI.SetText(self.stackCounter, "x " .. self.currentStack)

        else
            self:Clear()
        end

    else
        self:Clear()
    end
end
function InventorySlot:IsEmpty()
    return self.itemType == -1
end
function InventorySlot:IsSlotStackable()
    if self.stackability == -1 or self.currentStack == self.stackability then
        return false
    end

    return true
end
function InventorySlot:Destroy()
    DCEI.Destroy(self.inventoryUi)
end


local Inventory = { inventorySlots = {} }
Inventory.__index = Inventory
function Inventory:new(inventorySlots)
    local inventory = {}
    setmetatable(inventory, Inventory)

    inventory.inventorySlots = inventorySlots

    return inventory
end
function Inventory:SaveInventory()
    for i, slot in ipairs(self.inventorySlots) do
        slot:SaveSlot(i)
    end
end
function Inventory:LoadInventory()
    for i, slot in ipairs(self.inventorySlots) do
        slot:LoadSlot(i)
    end
end
function Inventory:ClearInventorySave()
    for i, slot in ipairs(self.inventorySlots) do
        slot:ClearSlot(i)
    end
end
function Inventory:UpdateSlots(deltaTime)
    for i, slot in ipairs(self.inventorySlots) do
        slot:UpdateSlotRecharge(deltaTime)
    end
end
function Inventory:ActivateInventorySlotRecharge(itemName, maxRechargeTime)
    for i, slot in ipairs(self.inventorySlots) do
        if slot:GetInventoryItemName() == itemName then
            slot:ActivateInventorySlotRecharge(maxRechargeTime)
            break
        end
    end
end
function Inventory:DeActivateInventorySlotRecharge(itemName)
    for i, slot in ipairs(self.inventorySlots) do
        if slot:GetInventoryItemName() == itemName then
            slot:DeActivateInventorySlotRecharge()
            break
        end
    end
end
function Inventory:IsFull()
    for i, slot in ipairs(self.inventorySlots) do
        if slot:IsEmpty() then
            return false
        end
    end

    return true
end
function Inventory:GetEmptySlotIndex()
    for i, slot in ipairs(self.inventorySlots) do
        if slot:IsEmpty() then
            return i
        end
    end

    return -1
end
function Inventory:GetInventorySlotByName(itemName)
    local index = self:GetItemInInventoryIndex(itemName)
    return self.inventorySlots[index]
end
function Inventory:GetItemInInventoryIndex(itemName)
    for i, slot in ipairs(self.inventorySlots) do
        local slotItemName = slot:GetInventoryItemName()
        if slotItemName == itemName then
            return i
        end
    end

    return -1
end
function Inventory:AddNewItemToInventory(slotIndex, collectibleItem)
    local inventorySlot = self.inventorySlots[slotIndex]

    inventorySlot:UpdateInventoryItem(
        collectibleItem.itemName, 
        collectibleItem.itemType,
        collectibleItem.itemDescription,
        collectibleItem.itemImage,
        collectibleItem.itemStackable,
        1
    )

    self:SaveInventory()
end
function Inventory:CheckAndAddItemToSlot(collectibleName)
    local collectibleItem = COLLECTIBLES_TABLE[collectibleName]
    local itemStackable = collectibleItem.itemStackable

    DCEI.LogMessage("Collectible Item: " .. collectibleName)
    DCEI.LogMessage("Item Stackable: " .. tostring(itemStackable))
    
    if itemStackable == -1 then
        if self:IsFull() then
            return false
        end

        local emptySlotIndex = self:GetEmptySlotIndex()
        self:AddNewItemToInventory(emptySlotIndex, collectibleItem)
        
        return true

    else
        local slotItemIndex = self:GetItemInInventoryIndex(collectibleName)
        if slotItemIndex ~= -1 then
            local inventorySlot = self.inventorySlots[slotItemIndex]
            if inventorySlot:IsSlotStackable() then
                inventorySlot:StackInventoryItem()
                self:SaveInventory()
                return true
            end

        elseif not self:IsFull() then
            local emptySlotIndex = self:GetEmptySlotIndex()
            self:AddNewItemToInventory(emptySlotIndex, collectibleItem)
            return true

        else
            return false
        end
    end

    return false
end
function Inventory:GetInventorySlots()
    return self.inventorySlots
end


mod.Inventory = Inventory
mod.InventorySlot = InventorySlot
mod.InventoryCollectibles = COLLECTIBLES_TABLE
return mod