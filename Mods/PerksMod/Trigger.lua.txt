local mod = {}

local PERKS = {
    SwiftHands = {
        perkImage = "guild_badge_icons20",
        perkDescription = "Increases character attack speed by 30% but also character will 30% more damage",
        perkName = "Swift Hands",
        value = "_PlayerCharacter_SwiftHands"
    },
    OldCustomer = {
        perkImage = "guild_badge_icons11",
        perkDescription = "50% discount on all products in shop!!!",
        perkName = "Old Customer",
        value = 0.5
    },
    HelmOfValor = {
        perkImage = "guild_badge_icons12",
        perkDescription = "Helm of Valor will block 1 incoming attack for the character every 10 seconds",
        perkName = "Helm Of Valor",
        value = 10,
        valueAlt = "_Collectible_Helm_Of_Valor"
    },
    Alchemist = {
        perkImage = "icon_goblinchef_skill_secret_ingredient",
        perkDescription = "Increase all potion effectiveness by 50%",
        perkName = "Alchemist",
        value = 0.5
    },
    PoisonOrb = {
        perkImage = "talent_bonus_damage_poison",
        perkDescription = "Grants player the ability to add one layer of POISON effect on target unit when hit by light attack",
        perkName = "Poison Orb",
        value = "_Perks_PoisonOrb",
        valueAlt = 1
    },
    MeatShield = {
        perkImage = "icon_avalanchesurfer_skill_earthward",
        perkDescription = "Sacrifice 50 Max HP, but each of your stamina bar can block 5 damage",
        perkName = "Meat Shield",
        value = 50
    },
    AdenalineRush = {
        perkImage = "icon_reinforce_skill_spearthrow",
        perkName = "Adenaline Rush",
        perkDescription = "Killing enemies will instantly regenerate 1 stamina, cooldown 1 second",
        value = 1
    },
    KillerInstinct = {
        perkImage = "icon_chosen_skill_smite",
        perkName = "Killer Instinct",
        perkDescription = "When Dwarf Smith falls below 30% HP, all attack damage increased by 50%",
        value = 0.30
    },
    Deflection = {
        perkImage = "icon_skill_dragoon_whirlwind",
        perkName = "Deflection",
        perkDescription = "When Dwarf Smith takes damage, deflection 20% of that damage to his surrounding enemies",
        value = 0.2
    },
    Redemption = {
        perkImage = "icon_skill_charm",
        perkName = "Redemption",
        perkDescription = "When Dwarf Smith kills an enemy during the invulnerability-state heal 5% of the max HP",
        value = 0.05
    },
    ForcefulLanding = {
        perkImage = "icon_icemage_skill_supernova",
        perkName = "Forceful Landing",
        perkDescription = "Dwarf Smith’s jump/leap will stun the surrounding enemies for 0.5 seconds upon landing",
        value = 0.5
    },
    AggressiveLanding = {
        perkImage = "icon_blastrune_skill_blastforce",
        perkName = "Aggressive Landing",
        perkDescription = "Dwarf Smith’s jump/leap will deal 3 damage to the surrounding enemies upon landing",
        value = 3
    },
    Toughness = {
        perkImage = "icon_skill_vigor",
        perkName = "Toughness",
        perkDescription = "The stamina cost of Dwarf Smith’s heavy attack decreases by 1",
        value = 1
    },
    Knockback = {
        perkImage = "icon_dwarfsmith_skill_hammercrash",
        perkDescription = "Light attack will now knock light enemies (not heavy enemies or BOSS) back",
        value = "_Enemy_Knockback",
        valueValidation = "_Enemy_CanHaveKnockback",
        valueAlt = 2,
        valueTime = 0.3
    }
}

local PERK_NAMES = {
    SwiftHands = "SwiftHands",
    OldCustomer = "OldCustomer",
    HelmOfValor = "HelmOfValor",
    Alchemist = "Alchemist",
    PoisonOrb = "PoisonOrb",
    AdenalineRush = "AdenalineRush",
    KillerInstinct = "KillerInstinct",
    Deflection = "Deflection",
    Redemption = "Redemption",
    ForcefulLanding = "ForcefulLanding",
    AggressiveLanding = "AggressiveLanding",
    Toughness = "Toughness",
    Knockback = "Knockback"
}

local PerkIconDisplay = {
    perkName = "",

    perkImage = nil,
    perkRecharge = nil,

    isPerkRechargeActive = false,
    maxRechargeTime = 0,
    currentRechargeTime = 0
}
PerkIconDisplay.__index = PerkIconDisplay
function PerkIconDisplay:new(uiLayer, perkName)
    local perkIconDisplay = {}
    setmetatable(perkIconDisplay, PerkIconDisplay)

    perkIconDisplay.perkName = perkName

    perkIconDisplay.perkImage = nil
    perkIconDisplay.perkRecharge = nil

    perkIconDisplay.isPerkRechargeActive = false
    perkIconDisplay.maxRechargeTime = 0
    perkIconDisplay.currentRechargeTime = 0

    perkIconDisplay:CreateUI(uiLayer, perkName)

    return perkIconDisplay
end
function PerkIconDisplay:CreateUI(uiLayer, perkName)
    local baseFrame = DCEI.NewFrame(uiLayer)
    DCEI.SetMinSize(baseFrame, 50, 50)
    DCEI.SetMaxSize(baseFrame, 50, 50)

    local imageName = PERKS[perkName].perkImage
    DCEI.SetBackgroundImage(baseFrame, imageName)
    
    local overlay = DCEI.NewFrame(baseFrame)
    DCEI.SetMinSize(overlay, 50, 50)
    DCEI.SetBackgroundImage(overlay, "ui_squareround")
    DCEI.SetBackgroundImageColor(overlay, 0, 0, 0, 0)

    self.perkImage = baseFrame
    self.perkRecharge = overlay
end
function PerkIconDisplay:UpdateRecharge(deltaTime)
    if not self.isPerkRechargeActive then
        return
    end

    self.currentRechargeTime = self.currentRechargeTime - deltaTime

    if self.currentRechargeTime <= 0 then
        self.isPerkRechargeActive = false
        DCEI.SetBackgroundImageColor(self.perkRecharge, 0, 0, 0, 0)
        
    else
        local rechargeRatio = self.currentRechargeTime / self.maxRechargeTime
        DCEI.SetBackgroundImageFillAmount(self.perkRecharge, rechargeRatio)
    end
end
function PerkIconDisplay:ActivateRecharge(currentRechargeTime, maxRechargeTime)
    self.isPerkRechargeActive = true
    self.maxRechargeTime = maxRechargeTime
    self.currentRechargeTime = currentRechargeTime

    DCEI.SetBackgroundImageColor(self.perkRecharge, 0, 0, 0, 0.5)
end
function PerkIconDisplay:GetPerkName()
    return self.perkName
end


local PerkDisplay = {
    currentPerks = {},
    displayedPerks = {},

    currentPerksUIContainer = nil,
    currentPerksUI = {},

    topLayerButtons = {},
    bottomLayerButtons = {},
    mainFrame = nil,

    player = nil,
    perkDisplayedInRound = false,

    callbacks = {}
}
PerkDisplay.__index = PerkDisplay
function PerkDisplay:new(uiLayerTop, uiStack)
    local perkDisplay = {}
    setmetatable(perkDisplay, PerkDisplay)

    perkDisplay.currentPerks = {}
    perkDisplay.displayedPerks = {}

    perkDisplay.currentPerksUIContainer = nil
    perkDisplay.currentPerksUI = {}

    perkDisplay.topLayerButtons = {}
    perkDisplay.bottomLayerButtons = {}
    perkDisplay.mainFrame = nil

    perkDisplay.player = nil
    perkDisplay.perkDisplayedInRound = false

    perkDisplay:CreateUI(uiLayerTop)
    perkDisplay:HidePerks()
    perkDisplay:Load()

    perkDisplay:CreateBaseDisplayUI(uiStack) -- Create this at the end so that all UI is displayed

    return perkDisplay
end
function PerkDisplay:Save()
    mod.SavePerks(mod.ConvertPerksToString(self.currentPerks), self.perkDisplayedInRound)
end
function PerkDisplay:Load()
    local stringValue, perkDisplayed = mod.LoadPerks()
    if stringValue == nil or perkDisplayed == nil then
        return
    end

    self.currentPerks = mod.ConvertStringToPerks(stringValue)
    self.perkDisplayedInRound = mod.ToBoolean(perkDisplayed)
end
function PerkDisplay:Clear()
    mod.ClearPerks()
end
function PerkDisplay:AddCallback(callback)
    table.insert(self.callbacks, callback)
end
function PerkDisplay:HasPerk(perkName)
    for _, perk in ipairs(self.currentPerks) do
        if perk.perkName == perkName then
            return true
        end
    end

    return false
end
function PerkDisplay:Update(deltaTime)
    for _, icon in ipairs(self.currentPerksUI) do
        icon:UpdateRecharge(deltaTime)
    end
end
function PerkDisplay:CreateUI(uiLayer)
    local canvasSize = DCEI.GetUiCanvasSize()
    local bottomButtonHeight = 100

    local mainFrame = DCEI.NewFrame(uiLayer)
    DCEI.SetMatchParent(mainFrame, true, true)
    self.mainFrame = mainFrame

    local vStack = DCEI.NewVStack(mainFrame)

    -- Top Buttons
    local hTopFrame = DCEI.NewFrame(vStack)
    DCEI.SetMinSize(hTopFrame, canvasSize.x, canvasSize.y - bottomButtonHeight)
    for i = 1, 3 do
        local button = DCEI.NewButton(hTopFrame)
        DCEI.SetMinSize(button, canvasSize.x / 3, canvasSize.y - bottomButtonHeight)
        DCEI.SetMaxSize(button, canvasSize.x / 3, canvasSize.y - bottomButtonHeight)
        DCEI.SetBackgroundImage(button, "btn_yellow_invert")
        DCEI.SetLeftAlignmentInParent(button)
        DCEI.SetHorizontalOffsetInParent(button, (i - 1) * (canvasSize.x  / 3))

        local buttonFrame = DCEI.NewVStack(button)
        DCEI.SetSpacing(buttonFrame, 21)

        local perkIcon = DCEI.NewFrame(buttonFrame)
        DCEI.SetMinSize(perkIcon, 100, 100)
        DCEI.SetBackgroundImage(perkIcon, "icon_catalyst_main_item3_green_0" .. i)

        local perkTextName = DCEI.NewText(buttonFrame)
        
        local perkTextDescription = DCEI.NewText(buttonFrame)
        DCEI.SetMaxSize(perkTextDescription, canvasSize.x / 3 - 21, 250)

        local perkDisplayButton = {
            perkName = "",
            perkImage = perkIcon,
            perkNameDisplay = perkTextName,
            perkDescription = perkTextDescription,
            perkButton = button
        }

        DCEI.SetOnClickCallback(
            button,
            function()
                self:HandleButtonClicked(i, perkDisplayButton.perkName)
            end
        )

        table.insert(self.topLayerButtons, perkDisplayButton)
    end

    -- Bottom Buttons
    local hBottomStack = DCEI.NewHStack(vStack)
    for i = 1, 3 do
        local button = DCEI.NewButton(hBottomStack)
        DCEI.SetMinSize(button, canvasSize.x / 3, bottomButtonHeight)
        DCEI.SetMaxSize(button, canvasSize.x / 3, bottomButtonHeight)
        DCEI.SetBackgroundImage(button, "btn_yellow_invert")

        local buttonText = DCEI.NewText(button)
        DCEI.SetText(buttonText, "Perk: " .. i)

        local perkDisplayButton = {
            perkName = "",
            perkNameDisplay = buttonText,
            perkButton = button
        }

        DCEI.SetOnClickCallback(
            button,
            function()
                self:HandleButtonClicked(i, perkDisplayButton.perkName)
            end
        )
        
        table.insert(self.bottomLayerButtons, perkDisplayButton)
    end
end
function PerkDisplay:CreateBaseDisplayUI(uiStack)
    self.currentPerksUIContainer = uiStack

    -- UI List
    self.currentPerksUI = {}

    for _, perk in ipairs(self.currentPerks) do
        local iconUI = PerkIconDisplay:new(uiStack, perk.perkName)
        table.insert(self.currentPerksUI, iconUI)
    end
end
function PerkDisplay:HandleButtonClicked(index, perkName)
    self:DisableButtons()

    local canvasSize = DCEI.GetUiCanvasSize()
    local buttonSize = canvasSize.x / 3

    for i, button in ipairs(self.topLayerButtons) do
        if i == index then
            DCEI.AnimateScale(button.perkButton, { x = 1, y = 1, z = 1 }, { x = 0.5, y = 0.5, z = 0.5 }, 1, "InOutExpo")
            DCEI.TriggerAddTimerEventElapsed(
                function()
                    DCEI.AnimateAlpha(button.perkButton, 1, 0, 0.5, "InOutExpo")
                end,
                1.1
            )
        else
            DCEI.AnimateAlpha(button.perkButton, 1, 0, 1, "InOutExpo")
        end
    end

    for _, button in ipairs(self.bottomLayerButtons) do
        DCEI.AnimateAlpha(button.perkButton, 1, 0, 1, "InOutExpo")
    end

    self:ActivatePerk(perkName)
    self:MarkPerkDisplayed()

    DCEI.TriggerAddTimerEventElapsed(
        function()
            self:HidePerks()
        end,
        2
    )
end
function PerkDisplay:ShowRandomPerks(player)
    local notActivePerks = {}

    for _, perk in pairs(PERK_NAMES) do
        local hasPerk = false

        for _, currentPerk in ipairs(self.currentPerks) do
            if currentPerk.perkName == perk then
                hasPerk = true
                break
            end
        end

        if not hasPerk then
            table.insert(notActivePerks, perk)
        end
    end

    notActivePerks = mod.ShuffleTable(notActivePerks)

    for i = 1, 3 do
        local perk = PERKS[notActivePerks[i]]

        local topButton = self.topLayerButtons[i]
        topButton.perkName = notActivePerks[i]
        DCEI.SetBackgroundImage(topButton.perkImage, perk.perkImage)
        DCEI.SetText(topButton.perkNameDisplay, perk.perkName)
        DCEI.SetText(topButton.perkDescription, perk.perkDescription)

        local bottomButton = self.bottomLayerButtons[i]
        bottomButton.perkName = notActivePerks[i]
        DCEI.SetText(bottomButton.perkNameDisplay, perk.perkName)
    end

    self:DisplayPerks(player)
end
function PerkDisplay:DisplayPerks(player)
    self:EnableButtons()
    DCEI.SetActive(self.mainFrame, true)

    for _, button in ipairs(self.topLayerButtons) do
        DCEI.AnimateScale(button.perkButton, { x = 0, y = 0, z = 0 }, { x = 1, y = 1, z = 1 }, 1, "InOutExpo")
        DCEI.AnimateAlpha(button.perkButton, 0, 1, 1, "InOutExpo")
    end

    for _, button in ipairs(self.bottomLayerButtons) do
        DCEI.AnimateAlpha(button.perkButton, 0, 1, 1, "InOutExpo")
    end

    self.player = player
    self.player:HidePlayerUI()
    
    DCEI.HideJoystick(0)
end
function PerkDisplay:HidePerks()
    DCEI.SetActive(self.mainFrame, false)

    if self.player ~= nil then
        self.player:ShowPlayerUI()
        self.player = nil
    end
    DCEI.ShowJoystick(0)
end
function PerkDisplay:EnableButtons()
    for _, button in ipairs(self.topLayerButtons) do
        DCEI.EnableButton(button.perkButton, true)
    end

    for _, button in ipairs(self.bottomLayerButtons) do
        DCEI.EnableButton(button.perkButton, true)
    end
end
function PerkDisplay:DisableButtons()
    for _, button in ipairs(self.topLayerButtons) do
        DCEI.EnableButton(button.perkButton, false)
    end

    for _, button in ipairs(self.bottomLayerButtons) do
        DCEI.EnableButton(button.perkButton, false)
    end
end
function PerkDisplay:MarkPerkDisplayed()
    self.perkDisplayedInRound = true
end
function PerkDisplay:ClearPerkMark()
    self.perkDisplayedInRound = false
end
function PerkDisplay:GetDisplayedInRound()
    return self.perkDisplayedInRound
end
function PerkDisplay:SetPerkValue(perkName, value)
    for i = 1, #self.currentPerks do
        if self.currentPerks[i].perkName == perkName then
            self.currentPerks[i].value = value
        end
    end
end
function PerkDisplay:GetPerkValue(perkName)
    for _, perk in ipairs(self.currentPerks) do
        if perk.perkName == perkName then
            return perk.value
        end
    end

    return nil
end
function PerkDisplay:ActivatePerk(perkName)
    DCEI.LogMessage("Perk Activated: " .. perkName)

    local perk = {
        perkName = perkName,
        value = tonumber(PERKS[perkName].value) -- Don't care if it is astring or not. Just the number values are required
    }

    -- Set value to 0 in case of timers as these need to be instantly activated
    if perkName == PERK_NAMES.HelmOfValor then
        perk.value = 0
    end

    table.insert(self.currentPerks, perk)

    local perkIcon = PerkIconDisplay:new(self.currentPerksUIContainer, perkName)
    table.insert(self.currentPerksUI, perkIcon)

    for _, callback in ipairs(self.callbacks) do
        callback(perkName)
    end
end
function PerkDisplay:ActivatePerkRecharge(perkName, currentRechargeTime, maxRechargeTime)
    for _, icon in ipairs(self.currentPerksUI) do
        if icon.perkName == perkName then
            icon:ActivateRecharge(currentRechargeTime, maxRechargeTime)
            break
        end
    end
end


function mod.ConvertPerksToString(currentPerks)
    local stringValue = ""

    for _, perk in ipairs(currentPerks) do
        stringValue = stringValue .. perk.perkName .. "," .. tostring(perk.value)
        stringValue = stringValue .. ":"
    end

    return stringValue
end

function mod.ConvertStringToPerks(stringValue)
    local perks = mod.split(stringValue, ":")
    local currentPerks = {}

    for _, value in pairs(perks) do
        local data = mod.split(value, ",")

        table.insert(
            currentPerks, 
            {  
                perkName = data[1],
                value = tonumber(data[2])
            }
        )
    end

    return currentPerks
end

mod.Perks = PERKS
mod.PerkNames = PERK_NAMES
mod.PerkDisplay = PerkDisplay

mod.SavePerks = nil
mod.LoadPerks = nil
mod.ClearPerks = nil

mod.split = nil
mod.ShuffleTable = nil
mod.ToBoolean = nil

return mod