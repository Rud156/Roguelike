local mod = {}

function mod.VectorDistance(vectorA, vectorB)
    local x = vectorA.x - vectorB.x
    local y = vectorA.y - vectorB.y

    return math.sqrt(x * x + y * y)
end

function mod.VectorSubtract(vectorA, vectorB)
    local xDiff = vectorA.x - vectorB.x
    local yDiff = vectorA.y - vectorB.y

    return { x = xDiff, y = yDiff }
end

function mod.To360Angle(rotationDeg)
    while rotationDeg < 0 do
        rotationDeg = rotationDeg + 360
    end
    while rotationDeg > 360 do
        rotationDeg = rotationDeg - 360
    end

    return rotationDeg
end

function mod.LerpAngleDeg(fromDeg, toDeg, progress)
    local delta = (toDeg - fromDeg + 360 + 180) % 360 - 180
	return (fromDeg + delta * progress + 360) % 360
end

function mod.NormalizeUnitRotation(unitRotation)
    local yRotation = unitRotation.y
    -- Everything is different in the mirror world
    if unitRotation.x == -180.0 or unitRotation.z == -180.0 then -- Bad hack but the engine does not return consistent Y Rotations
        yRotation = 180 - yRotation
    end

    yRotation = mod.To360Angle(yRotation)

    return yRotation
end

function mod.CompareUnits(unit1, unit2)
    local unit1ID = tostring(unit1)
    local unit2ID = tostring(unit2)

    return unit1ID == unit2ID
end

function mod.ShuffleTable(tInput)
    local tReturn = {}
    
    for i = #tInput, 1, -1 do
        local j = math.random(i)
        tInput[i], tInput[j] = tInput[j], tInput[i]
        table.insert(tReturn, tInput[i])
    end

    return tReturn
end

function mod.split(s, sep)
    local fields = {}

    local sep = sep or " "
    local pattern = string.format("([^%s]+)", sep)
    string.gsub(s, pattern, function(c) fields[#fields + 1] = c end)

    return fields
end

return mod