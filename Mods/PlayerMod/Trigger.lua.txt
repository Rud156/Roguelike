local mod = {}

local PLAYER_DASH_STAMINA = 1
local PLAYER_DASH_CD = 0.3
local PLAYER_DASH_RANGE = 2.5
-- Player Ranged
local PLAYER_NAME_RANGED = "_PlayerCharacter_Ranged"
local PLAYER_RANGED_LIGHT_WEAPON = "_PlayerCharacter_Ranged_LightAttack"
local PLAYER_RANGED_HEAVY_WEAPON = "_PlayerCharacter_Ranged_HeavyAttack"
local PLAYER_RANGED_DASH_ABILITY = "_PlayerCharacter_Ranged_Dash"
local PLAYER_RANGED_HEAVY_ATTACK_STAMINA = 3
local PLAYER_RANGED_LIGHT_WEAPON_CD = 0.6
local PLAYER_RANGED_HEAVY_WEAPON_CD = 0.6
local PLAYER_RANGED_LIGHT_WEAPON_RANGE = 7
local PLAYER_RANGED_HEAVY_WEAPON_RANGE = 7
-- Player Melee
local PLAYER_NAME_MELEE = "_PlayerCharacter_Melee"
local PLAYER_MELEE_LIGHT_WEAPON = "_PlayerCharacter_Melee_LightAttack"
local PLAYER_MELEE_HEAVY_WEAPON = "_PlayerCharacter_Melee_HeavyAttack"
local PLAYER_MELEE_DASH_ABILITY = "_PlayerCharacter_Melee_Dash"
local PLAYER_MELEE_HEAVY_ATTACK_STAMINA = 3
local PLAYER_MELEE_LIGHT_WEAPON_CD = 0.6
local PLAYER_MELEE_HEAVY_WEAPON_CD = 0.8

local PLAYER_SLOW_BEHAVIOUR = "_Enemy_Ooze_Slow"
local SLOWDOWN_BASE_TIMER = 4

local PLAYER_MAX_STAMINA = 6
local PLAYER_INITIAL_MAX_STAMINA = 3
local PLAYER_STAMINA_REGEN_RATE = 1
local PLAYER_STAMINA_REGEN_DELAY = 2

local PLAYER_BASE_HEALTH = 150
local DELAYED_LOAD_TIMER = 0.1

local KILLER_INSTINCT_BEHAVIOUR = "_PlayerCharacter_KillerInstinct"

local PLAYER_DEFLECTION_DISTANCE = 0.8

local PLAYER_INVINCIBLE_TIMER = 3

local Player = {
    playerUnit = nil,
    camera = nil,

    playerType = 0, -- PlayerType: 0: Melee, 1: Ranged

    playerDashActive = false,
    playerDashCoolDownTimer = 0,

    playerMoving = false,
    playerCooldownTimer = 0,

    lastFramePlayerHealth = 0,
    
    playerStaminaList = {},
    playerStaminaAmount = 0,
    playerStaminaRegenTimer = 0,
    playerMaxStamina = 3, -- Initial Start Value. It will increase with upgrade...

    healthBarBackground = nil,
    staminaBarHolder = nil,

    playerGoldAmount = 0,

    skillDisplay = nil,
    delayLoadTimer = 0,

    behaviourName = nil,
    effectsTimer = 0,

    killerInstinctActive = false
}
Player.__index = Player
function Player:new(xPosition, yPosition, playerType, uiRoot, skillDisplay)
    local player = {}
    setmetatable(player, Player)

    local playerUnit

    if playerType == 0 then
        playerUnit = DCEI.CreateUnit(1, 1, PLAYER_NAME_MELEE, xPosition, yPosition)
    else
        playerUnit = DCEI.CreateUnit(1, 1, PLAYER_NAME_RANGED, xPosition, yPosition)
    end

    skillDisplay.hexGenerator:AddCallback(
        function(skillName)
            player:HandleSkillCallback(skillName)
        end
    )

    player.playerUnit = playerUnit
    player.camera = nil

    player.playerType = playerType

    player.playerDashActive = false
    player.playerDashCoolDownTimer = 0

    player.playerMoving = false
    player.playerCooldownTimer = 0

    player.lastFramePlayerHealth = DCEI.GetHealthValue(playerUnit)

    player.playerStaminaList = {}
    player.playerStaminaAmount = PLAYER_INITIAL_MAX_STAMINA
    player.playerStaminaRegenTimer = 0
    player.playerMaxStamina = PLAYER_INITIAL_MAX_STAMINA

    player.healthBarBackground = nil
    player.staminaBarHolder = nil

    player.playerGoldAmount = 0
    
    player.skillDisplay = skillDisplay
    player.delayLoadTimer = DELAYED_LOAD_TIMER

    player.behaviourName = nil
    player.effectsTimer = 0

    player.killerInstinctActive = false

    player:CreatePlayerUI(uiRoot)

    return player
end
function Player:SaveData()
    DCEI.LogMessage("Saving Player Data")

    local playerHealth = DCEI.GetHealthValue(self.playerUnit)
    
    local playerData = {
        health = playerHealth,
        staminaAmount = self.playerStaminaAmount,
        staminaTimer = self.playerStaminaRegenTimer,
        gold = self.playerGoldAmount,
        maxStamina = self.playerMaxStamina
    }
    mod.SavePlayerData(playerData)
end
function Player:LoadData()
    DCEI.LogMessage("Getting Player Data")

    local playerData = mod.GetPlayerData()

    local playerHealth = playerData.health
    local playerStaminaAmount = playerData.staminaAmount
    local playerStaminaRegenTimer = playerData.staminaTimer
    local playerGoldAmount = playerData.gold

    local playerMaxStamina = playerData.maxStamina
    if playerMaxStamina ~= nil then
        self.playerMaxStamina = playerMaxStamina
    end

    if playerHealth == nil or playerHealth == 0 or playerStaminaAmount == nil or playerStaminaRegenTimer == nil then
        return
    end

    DCEI.LogMessage("Loading Player Data")

    DCEI.SetHealthValue(self.playerUnit, playerHealth)
    self.lastFramePlayerHealth = playerHealth

    self.playerStaminaAmount = playerStaminaAmount
    self.playerStaminaRegenTimer = playerStaminaRegenTimer

    self.playerGoldAmount = playerGoldAmount
end
function Player:ClearData(keepStamina)
    DCEI.LogMessage("Clearing Player Data")
    mod.ClearPlayerData(keepStamina)
end
function Player:HandleBehaviourAdded(behaviourName)
    if behaviourName == PLAYER_SLOW_BEHAVIOUR then -- Surefooted
        self.behaviourName = behaviourName
        self.effectsTimer = SLOWDOWN_BASE_TIMER

        local additionalTimer = 0
        local skillStatus = self.skillDisplay.hexGenerator:GetSkillStatus(mod.SkillNames.Surefooted)
        
        if skillStatus.isUnlocked then
            local value = mod.GetSkillValue(mod.SkillNames.Surefooted, skillStatus.skillLevel)
            additionalTimer = value

            self.effectsTimer = self.effectsTimer - self.effectsTimer * additionalTimer
        end
    end
end
function Player:HandleSkillCallback(skillName)
    local skillStatus = self.skillDisplay.hexGenerator:GetSkillStatus(skillName)
    if not skillStatus.isUnlocked then
        return
    end

    DCEI.LogMessage("Player Callback. Skill: " .. skillName)
    local value = mod.GetSkillValue(skillName, skillStatus.skillLevel)

    if skillName == mod.SkillNames.Robust then -- Robust
        DCEI.SetMaxHealth(self.playerUnit, PLAYER_BASE_HEALTH + value)
        DCEI.SetHealthValue(self.playerUnit, PLAYER_BASE_HEALTH + value)
        DCEI.LogMessage("Changing Player Max Health")

    elseif skillName == mod.SkillNames.Endurance then -- Endurance
        local totalStamina = PLAYER_INITIAL_MAX_STAMINA + value
        self.playerMaxStamina = totalStamina
        self:HandleStaminaRegenStart()
    end
end
function Player:CreatePlayerUI(uiRoot)
    -- Health Bar
    local healthBarBackground = DCEI.NewFrame(uiRoot)
    local healthBar = DCEI.NewFrame(healthBarBackground)

    DCEI.SetBackgroundImage(healthBarBackground, "bar_progression00_empty")
    DCEI.SetBackgroundImage(healthBar, "bar_exp00_fill")
    DCEI.SetBackgroundImageColor(healthBar, 0, 1, 0, 1)

    DCEI.SetMinSize(healthBarBackground, 67, 10)
    DCEI.SetMinSize(healthBar, 65, 7)

    DCEI.SetBackgroundImageFillAmountExpression(healthBar, "MainCharacter.Health.Fraction")
    DCEI.BindUnit("MainCharacter", self.playerUnit)
    DCEI.AttachToUnit(healthBarBackground, self.playerUnit, { offset = { up = 0.8 } })

    -- Stamina Bar
    self.playerStaminaList = {}

    local staminaBarHolder = DCEI.NewHStack(uiRoot)
    DCEI.SetSpacing(staminaBarHolder, 3)
    for i = 1, PLAYER_MAX_STAMINA do
        local staminaItem = DCEI.NewFrame(staminaBarHolder)
        DCEI.SetMinSize(staminaItem, 11, 11)
        table.insert(self.playerStaminaList, staminaItem)

        DCEI.SetBackgroundImage(staminaItem, "bar_reward00_pin")
    end
    DCEI.AttachToUnit(staminaBarHolder, self.playerUnit, { offset = { up = 0.6 } })
    
    -- Destroy UI when player dies
    DCEI.TriggerAddUnitDiedEvent(
        self.playerUnit, 
        function()
            DCEI.Destroy(healthBarBackground)
            DCEI.Destroy(staminaBarHolder)
        end
    )
    DCEI.TriggerAddUnitRemovedEvent(
        self.playerUnit,
        function()
            DCEI.Destroy(healthBarBackground)
            DCEI.Destroy(staminaBarHolder)
        end
    )

    self.healthBarBackground = healthBarBackground
    self.staminaBarHolder = staminaBarHolder

    self:HidePlayerUI()
end
function Player:ShowPlayerUI()
    DCEI.SetActive(self.healthBarBackground, true)
    DCEI.SetActive(self.staminaBarHolder, true)
end
function Player:HidePlayerUI()
    DCEI.SetActive(self.healthBarBackground, false)
    DCEI.SetActive(self.staminaBarHolder, false)
end
function Player:HandleInitialSkillData()
    -- Robust
    local healthSkillStatus = self.skillDisplay.hexGenerator:GetSkillStatus(mod.SkillNames.Robust)

    if healthSkillStatus.isUnlocked then
        local value = mod.GetSkillValue(mod.SkillNames.Robust, healthSkillStatus.skillLevel)
        DCEI.SetMaxHealth(self.playerUnit, PLAYER_BASE_HEALTH + value)
        DCEI.SetHealthValue(self.playerUnit, PLAYER_BASE_HEALTH + value)
    end
end
function Player:Update(deltaTime)
    if self.delayLoadTimer > 0 then
        self.delayLoadTimer = self.delayLoadTimer - deltaTime
        
        if self.delayLoadTimer <= 0 then
            self:HandleInitialSkillData()
            self:LoadData()
        end

    else
        -- This is done as the value is otherwise updated in Save Data
        self.lastFramePlayerHealth = DCEI.GetHealthValue(self.playerUnit)
    end

    self:UpdatePlayerStamina(deltaTime)
    self:UpdatePlayerStaminaUI()

    if self.playerDashCoolDownTimer > 0 then
        self.playerDashCoolDownTimer = self.playerDashCoolDownTimer - deltaTime
    end

    if self.playerCooldownTimer > 0 then
        self.playerCooldownTimer = self.playerCooldownTimer - deltaTime
        
        if self.playerCooldownTimer <= 0 then
            self.playerDashCoolDownTimer = PLAYER_DASH_CD
        end
    end

    if self.effectsTimer > 0 then
        self.effectsTimer = self.effectsTimer - deltaTime

        if self.effectsTimer <= 0 then
            DCEI.RemoveBehavior(self.playerUnit, self.behaviourName)
            self.behaviourName = nil
        end
    end

    self:CheckAndUpdateKillerInstinct()
end
function Player:CheckAndUpdateKillerInstinct() -- Killer Instinct
    local skillStatus = self.skillDisplay.hexGenerator:GetSkillStatus(mod.SkillNames.KillerInstinct)
    if not skillStatus.isUnlocked then
        return
    end

    local value = mod.GetSkillValue(mod.SkillNames.KillerInstinct, skillStatus.skillLevel)

    if self:HasPercentHP(value) then
        if not self.killerInstinctActive then
            self.killerInstinctActive = true
            DCEI.ApplyBehavior(self.playerUnit, KILLER_INSTINCT_BEHAVIOUR)
        end

    else
        if self.killerInstinctActive then
            self.killerInstinctActive = false
            DCEI.RemoveBehavior(self.playerUnit, KILLER_INSTINCT_BEHAVIOUR)
        end
    end
end
function Player:UpdatePlayerStamina(deltaTime)
    if self.playerStaminaRegenTimer <= 0 and self.playerStaminaAmount < self.playerMaxStamina then
        self.playerStaminaAmount = self.playerStaminaAmount + deltaTime * PLAYER_STAMINA_REGEN_RATE

        if self.playerStaminaAmount > self.playerMaxStamina then
            self.playerStaminaAmount = self.playerMaxStamina
        end
    end
    if self.playerStaminaRegenTimer > 0 then
        self.playerStaminaRegenTimer = self.playerStaminaRegenTimer - deltaTime
    end
end
function Player:UpdatePlayerStaminaUI()
    if self.playerUnit == nil then
        return
    end

    local currentStamina = self.playerStaminaAmount
    if currentStamina > self.playerMaxStamina then
        DCEI.LogError("Invalid Stamina Amount")
        return
    end
    
    for i = 1, #self.playerStaminaList do
        if i <= currentStamina then
            DCEI.SetBackgroundImageColor(self.playerStaminaList[i], 1, 1, 1, 1)
        else
            DCEI.SetBackgroundImageColor(self.playerStaminaList[i], 1, 1, 1, 0)
        end
    end
end
function Player:LookTowardsEnemy(enemy)
    if self.playerUnit == nil or self.playerMoving or self.playerDashActive then
        return
    end

    if enemy ~= nil then
        local enemyPosition = DCEI.GetUnitPosition2D(enemy)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)

        local direction = mod.VectorSubtract(enemyPosition, playerPosition)
        local angle = math.deg(math.atan(direction.x, direction.y))

        DCEI.SetUnitRotationEuler(self.playerUnit, 0, angle, 0)
    end
end
function Player:HandleStaminaRegenStart()
    self.playerStaminaRegenTimer = PLAYER_STAMINA_REGEN_DELAY

    -- Quick Recovery
    local quickRecovStatus = self.skillDisplay.hexGenerator:GetSkillStatus(mod.SkillNames.QuickRecovery)
    if quickRecovStatus.isUnlocked then
        local value = mod.GetSkillValue(mod.SkillNames.QuickRecovery, quickRecovStatus.skillLevel)

        local decreaseRate = self.playerStaminaRegenTimer * value
        self.playerStaminaRegenTimer = self.playerStaminaRegenTimer - decreaseRate
    end
end
function Player:HandleJoystickMoved(axes)
    if self.playerUnit == nil or self.playerDashActive then
        return
    end

    if self.playerCooldownTimer > 0 then
        return
    end

    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    self.playerMoving = true

    DCEI.Move(self.playerUnit, playerPosition.x + axes.x, playerPosition.y + axes.y)
end
function Player:HandleJoystickReleased()
    if self.playerUnit == nil or self.playerDashActive then
        return
    end

    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    self.playerMoving = false

    DCEI.Move(self.playerUnit, playerPosition.x, playerPosition.y)
end
function Player:HandleJoystickButtonClicked(buttonId, buttonEvent, roomEnemies)
    if buttonEvent ~= 1 then
        return
    end

    local enemy = nil
    
    if roomEnemies ~= nil then
        enemy = roomEnemies:GetActiveNearestEnemy(self.playerUnit)
    else
        enemy = nil
    end
    
    if buttonId == 0 then
        self:LaunchPlayerLightAttack(enemy)
    elseif buttonId == 1 then
        self:LaunchPlayerHeavyAttack(enemy)
    elseif buttonId == 2 then
        self:MakePlayerDash()
    end
end
function Player:LaunchPlayerLightAttack(enemy)
    if self.playerUnit == nil then
        DCEI.LogMessage("Player Died")
        return
    end

    if self.playerCooldownTimer > 0 then
        DCEI.LogMessage("Player Attack on Cooldown")
        return
    end

    DCEI.LogMessage("Launching Light Attack: " .. self.playerCooldownTimer)

    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    DCEI.Move(self.playerUnit, playerPosition.x, playerPosition.y)

    if self.playerType == 0 then
        self:LaunchPlayerMeleeLightAttack(enemy)
    else
        self:LaunchPlayerRangedLightAttack(enemy)
    end

    self.playerMoving = false
end
function Player:LaunchPlayerHeavyAttack(enemy)
    if self.playerUnit == nil then
        DCEI.LogMessage("Player Died")
        return
    end

    if self.playerCooldownTimer > 0 then
        DCEI.LogMessage("Player Attack on Cooldown")
        return
    end

    DCEI.LogMessage("Launching Heavy Attack: " .. self.playerCooldownTimer)

    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    DCEI.Move(self.playerUnit, playerPosition.x, playerPosition.y)

    if self.playerType == 0 then
        self:LaunchPlayerMeleeHeavyAttack(enemy)
    else
        self:LaunchPlayerRangedHeavyAttack(enemy)
    end

    self.playerMoving = false
end
function Player:LaunchPlayerMeleeLightAttack(enemy)
    if enemy ~= nil then
        local enemyPosition = DCEI.GetUnitPosition2D(enemy)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local direction = mod.VectorSubtract(enemyPosition, playerPosition)
        local yRotation = math.deg(math.atan(direction.x, direction.y))
        
        local xPoint = math.sin(math.rad(yRotation)) + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) + playerPosition.y
        DCEI.CastAbilityAtPosition(PLAYER_MELEE_LIGHT_WEAPON, self.playerUnit, xPoint, yPoint)
       
    else
        local playerRotation = DCEI.GetUnitRotationEuler(self.playerUnit)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local yRotation = mod.NormalizeUnitRotation(playerRotation)
        
        local xPoint = math.sin(math.rad(yRotation)) + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) + playerPosition.y

        DCEI.CastAbilityAtPosition(PLAYER_MELEE_LIGHT_WEAPON, self.playerUnit, xPoint, yPoint)
    end

    self.playerCooldownTimer = PLAYER_MELEE_LIGHT_WEAPON_CD
end
function Player:LaunchPlayerMeleeHeavyAttack(enemy)
    if self.playerStaminaAmount < PLAYER_MELEE_HEAVY_ATTACK_STAMINA then
        DCEI.LogMessage("Not enough stamina for Melee Heavy Attack")
        return
    end

    self.playerStaminaAmount = self.playerStaminaAmount - PLAYER_MELEE_HEAVY_ATTACK_STAMINA
    self:HandleStaminaRegenStart()

    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    DCEI.CastAbilityAtPosition(PLAYER_MELEE_HEAVY_WEAPON, self.playerUnit, playerPosition.x, playerPosition.y)

    self.playerCooldownTimer = PLAYER_MELEE_HEAVY_WEAPON_CD
    self.camera:StartShake(1, 0.3)
end
function Player:LaunchPlayerRangedLightAttack(enemy)
    if enemy ~= nil then
        local enemyPosition = DCEI.GetUnitPosition2D(enemy)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local direction = mod.VectorSubtract(enemyPosition, playerPosition)
        local yRotation = math.deg(math.atan(direction.x, direction.y))
        
        local xPoint = math.sin(math.rad(yRotation)) * PLAYER_RANGED_LIGHT_WEAPON_RANGE + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) * PLAYER_RANGED_LIGHT_WEAPON_RANGE + playerPosition.y
        DCEI.CastAbilityAtPosition(PLAYER_RANGED_LIGHT_WEAPON, self.playerUnit, xPoint, yPoint)

    else
        local playerRotation = DCEI.GetUnitRotationEuler(self.playerUnit)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local yRotation = mod.NormalizeUnitRotation(playerRotation)
        
        local xPoint = math.sin(math.rad(yRotation)) * PLAYER_RANGED_LIGHT_WEAPON_RANGE + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) * PLAYER_RANGED_LIGHT_WEAPON_RANGE + playerPosition.y
        DCEI.CastAbilityAtPosition(PLAYER_RANGED_LIGHT_WEAPON, self.playerUnit, xPoint, yPoint)
    end

    DCEI.LogMessage("Launching Light Attack")
    self.playerCooldownTimer = PLAYER_RANGED_LIGHT_WEAPON_CD
end
function Player:LaunchPlayerRangedHeavyAttack(enemy)
    if self.playerStaminaAmount < PLAYER_RANGED_HEAVY_ATTACK_STAMINA then
        DCEI.LogMessage("Not enough stamina for Ranged Heavy Attack")
        return
    end

    self.playerStaminaAmount = self.playerStaminaAmount - PLAYER_RANGED_HEAVY_ATTACK_STAMINA
    self:HandleStaminaRegenStart()

    if enemy ~= nil then
        local enemyPosition = DCEI.GetUnitPosition2D(enemy)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local direction = mod.VectorSubtract(enemyPosition, playerPosition)
        local yRotation = math.deg(math.atan(direction.x, direction.y))
        
        local xPoint = math.sin(math.rad(yRotation)) * PLAYER_RANGED_HEAVY_WEAPON_RANGE + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) * PLAYER_RANGED_HEAVY_WEAPON_RANGE + playerPosition.y
        DCEI.CastAbilityAtPosition(PLAYER_RANGED_HEAVY_WEAPON, self.playerUnit, xPoint, yPoint)
        
    else
        local playerRotation = DCEI.GetUnitRotationEuler(self.playerUnit)
        local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
        local yRotation = mod.NormalizeUnitRotation(playerRotation)
        
        local xPoint = math.sin(math.rad(yRotation)) * PLAYER_RANGED_HEAVY_WEAPON_RANGE + playerPosition.x
        local yPoint = math.cos(math.rad(yRotation)) * PLAYER_RANGED_HEAVY_WEAPON_RANGE + playerPosition.y
        DCEI.CastAbilityAtPosition(PLAYER_RANGED_HEAVY_WEAPON, self.playerUnit, xPoint, yPoint)
    end

    self.playerCooldownTimer = PLAYER_RANGED_HEAVY_WEAPON_CD
    self.camera:StartShake(1, 0)
end
function Player:MakePlayerDash()
    if self.playerUnit == nil or self.playerDashCoolDownTimer > 0 or self.playerCooldownTimer > 0 then
        DCEI.LogMessage("Player Died/Dash/Attack on CoolDown")
        return
    end

    if self.playerDashActive then
        DCEI.LogMessage("Dash Already Active")
        return
    end

    local playerStamina = self.playerStaminaAmount
    if playerStamina < PLAYER_DASH_STAMINA then
        DCEI.LogMessage("Not enough stamina for dash")
        return
    end

    DCEI.LogMessage("Making Player Dash: " .. self.playerDashCoolDownTimer)
    DCEI.LogMessage("Attack Cooldown Timer: " .. self.playerCooldownTimer)

    local updatedStamina = playerStamina - PLAYER_DASH_STAMINA
    self.playerStaminaAmount = updatedStamina
    self:HandleStaminaRegenStart()

    local dashRange = PLAYER_DASH_RANGE

    -- Bunny Hop
    local bunnyHopStatus = self.skillDisplay.hexGenerator:GetSkillStatus(mod.SkillNames.BunnyHop)
    if bunnyHopStatus.isUnlocked then
        local value = mod.GetSkillValue(mod.SkillNames.BunnyHop, bunnyHopStatus.skillLevel)
        dashRange = dashRange + dashRange * value
    end

    local playerRotation = DCEI.GetUnitRotationEuler(self.playerUnit)
    local playerPosition = DCEI.GetUnitPosition2D(self.playerUnit)
    local yRotation = mod.NormalizeUnitRotation(playerRotation)
    local xPoint = math.sin(math.rad(yRotation)) * dashRange + playerPosition.x
    local yPoint = math.cos(math.rad(yRotation)) * dashRange + playerPosition.y

    DCEI.Move(self.playerUnit, playerPosition.x, playerPosition.y)

    if self.playerType == 0 then
        DCEI.CastAbilityAtPosition(PLAYER_MELEE_DASH_ABILITY, self.playerUnit, xPoint, yPoint)
    else
        DCEI.CastAbilityAtPosition(PLAYER_RANGED_DASH_ABILITY, self.playerUnit, xPoint, yPoint)
    end

    self.playerDashActive = true
    self.playerMoving = false
end
function Player:AddGold(goldAmount)
    self.playerGoldAmount = self.playerGoldAmount + goldAmount
end
function Player:HasGold(goldAmount)
    return self.playerGoldAmount >= goldAmount
end
function Player:UseGold(goldAmount)
    if self:HasGold(goldAmount) then
        self.playerGoldAmount = self.playerGoldAmount - goldAmount
        return true
    end

    return false
end
function Player:GetPlayerGold()
    return self.playerGoldAmount
end
function Player:Destroy()
    DCEI.RemoveUnit(self.playerUnit)
end
function Player:SetPlayerPosition(xPosition, yPosition)
    DCEI.SetUnitPosition2D(self.playerUnit, xPosition, yPosition)
    DCEI.Move(self.playerUnit, xPosition, yPosition)
end
function Player:SetPlayerCamera(camera)
    self.camera = camera
end
function Player:SetDashCooldown()
    self.playerDashCoolDownTimer = PLAYER_DASH_CD
end
function Player:SetDashInActive()
    self.playerDashActive = false
end
function Player:GetPlayerUnit()
    return self.playerUnit
end
function Player:GetPlayerLastFrameHealth()
    return self.lastFramePlayerHealth
end
function Player:GetPlayerStamina()
    return self.playerStaminaAmount
end
function Player:HasPercentHP(percent)
    local maxHealth = DCEI.GetMaxHealth(self.playerUnit)
    local ratio = self.lastFramePlayerHealth / maxHealth

    if ratio <= percent then
        return true
    end

    return false
end


mod.Player = Player

mod.NormalizeUnitRotation = nil
mod.VectorSubtract = nil

mod.GetSkillValue = nil
mod.SkillNames = SkillNames

mod.SavePlayerData = nil
mod.GetPlayerData = nil
mod.ClearPlayerData = nil

mod.PlayerDeflectionDistance = PLAYER_DEFLECTION_DISTANCE
mod.PlayerInvincibleTimer = PLAYER_INVINCIBLE_TIMER

return mod