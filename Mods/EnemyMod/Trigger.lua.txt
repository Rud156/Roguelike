-- Constants
-- TODO: Probably put common strings into a Mod and use that?
local ENEMY_STUNNED_BEHAVIOUR = "_Enemy_Stunned"

local GOBLIN_CHEF = "_Enemy_GoblinChef"
local GOBLIN_CHEF_ATTACK = "_Enemy_GoblinChef_Attack"
local GOBLIN_CHEF_ATTACK_RANGE = 3
local GOBLIN_CHEF_TIME_BETWEEN_ATTACKS = 0.7
local GOBLIN_CHEF_SHOT_COUNT = 3
local GOBLIN_CHEF_ATTACK_COOLDOWN = 5
local GOBLIN_CHEF_MIN_CLOSEST_DISTANCE = 2.5
local GOBLIN_CHEF_MOVEBACK_DISTANCE = 5
local GOBLIN_CHEF_MOVEBACK_TIMER = 3
local GOBLIN_CHEF_STUN_TIME = 3.5

local GOBLIN_HOB = "_Enemy_Hobgoblin"
local GOBLIN_HOB_ATTACK = "_Enemy_Hobgoblin_Attack"
local GOBLIN_HOB_ATTACK_RANGE = 1
local GOBLIN_HOB_ATTACK_WAIT_TIMER = 1.5
local GOBLIN_HOB_MIN_CLOSEST_DISTANCE = 1
local GOBLIN_HOB_STUN_TIME = 3.5

local GOBLIN = "_Enemy_Goblin"
local GOBLIN_ATTACK = "_Enemy_Goblin_Attack"
local GOBLIN_ATTACK_RANGE = 1
local GOBLIN_ATTACK_WAIT_TIMER = 1.5
local GOBLIN_MIN_CLOSEST_DISTANCE = 1
local GOBLIN_STUN_TIME = 3.5

local mod = {}

-- #region Goblin Chef Enemy
local GoblinChef = {
    -- Units
    room = nil,
    unit = nil,
    
    enemyState = 0, -- 0: Idle, 1: Targetting Movement, 2: Move Back, 3: Attacking, 4: Stunned

    -- MoveBack
    targetMovebackPoint = nil,
    movebackTimer = 0,

    -- Attack
    attackCooldownTimer = 0,
    currentTimeBetweenAttacks = 0,
    currentShotCount = 0,

    -- Stunned
    stunTimer = 0
}
GoblinChef.__index = GoblinChef
function GoblinChef:new(room, xPosition, yPosition)
    local goblinChef = {}
    setmetatable(goblinChef, GoblinChef)

    local enemyUnit = DCEI.CreateUnit(-1, -1, GOBLIN_CHEF, xPosition, yPosition)
    goblinChef.room = room
    goblinChef.unit = enemyUnit

    goblinChef.enemyState = 0

    goblinChef.targetMovebackPoint = nil

    goblinChef.attackCooldownTimer = 0
    goblinChef.currentTimeBetweenAttacks = 0
    goblinChef.currentShotCount = 0

    goblinChef.stunTimer = 0

    return goblinChef
end
function GoblinChef:Update(deltaTime, playerPosition)
    -- Idle will be the main state switcher...
    if self.enemyState == 0 then
        self:UpdateIdleState(deltaTime, playerPosition)
    elseif self.enemyState == 1 then
        self:TargetPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 2 then
        self:UpdateMoveBackState(deltaTime)
    elseif self.enemyState == 3 then
        self:AttackPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 4 then
        self:UpdateEnemyStunned(deltaTime)
    end

    if self.enemyState ~= 3 then
        self.attackCooldownTimer = self.attackCooldownTimer - deltaTime
    end
end
function GoblinChef:CheckAndActivateStunnedState(enemyUnit)
    if self.unit == enemyUnit then
        local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
        DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)

        self.stunTimer = GOBLIN_CHEF_STUN_TIME
        self:SetEnemyState(4)

        return true
    end

    return false
end
function GoblinChef:UpdateIdleState(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer <= GOBLIN_CHEF_ATTACK_RANGE then
        if self.attackCooldownTimer <= 0 then
            self.currentShotCount = GOBLIN_CHEF_SHOT_COUNT
            self.currentTimeBetweenAttacks = 0
            self.attackCooldownTimer = 0

            local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
            DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)
            self:SetEnemyState(3)
        else
            local randomAwayPoint = self:FindRandomMoveBackPointAroundPlayer(playerPosition)
            self.targetMovebackPoint = randomAwayPoint
            self.movebackTimer = GOBLIN_CHEF_MOVEBACK_TIMER
            self:SetEnemyState(2)    
        end

    elseif distanceFromPlayer < GOBLIN_CHEF_MIN_CLOSEST_DISTANCE then
        local randomAwayPoint = self:FindRandomMoveBackPointAroundPlayer(playerPosition)
        self.targetMovebackPoint = randomAwayPoint
        self.movebackTimer = GOBLIN_CHEF_MOVEBACK_TIMER
        self:SetEnemyState(2)

    else
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
        self:SetEnemyState(1)
    end
end
function GoblinChef:TargetPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer > GOBLIN_CHEF_MIN_CLOSEST_DISTANCE then
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
    end

    -- Switch to Attack State only when moving normally
    if distanceFromPlayer <= GOBLIN_CHEF_ATTACK_RANGE then
        if self.attackCooldownTimer <= 0 then
            self.currentShotCount = GOBLIN_CHEF_SHOT_COUNT
            self.currentTimeBetweenAttacks = 0
            self.attackCooldownTimer = 0

            local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
            DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)
            self:SetEnemyState(3)

        else
            local randomAwayPoint = self:FindRandomMoveBackPointAroundPlayer(playerPosition)
            self.targetMovebackPoint = randomAwayPoint
            self.movebackTimer = GOBLIN_CHEF_MOVEBACK_TIMER
            self:SetEnemyState(2)
        end
    end
end
function GoblinChef:UpdateMoveBackState(deltaTime)
    DCEI.Move(self.unit, self.targetMovebackPoint.x, self.targetMovebackPoint.y)
    self.movebackTimer = self.movebackTimer - deltaTime

    if self.movebackTimer <= 0 then
        self:SetEnemyState(0) -- Reset to Idle State to find a new movement
    end
end
function GoblinChef:AttackPlayer(deltaTime, playerPosition)
    self:LookAtPlayer(playerPosition)

    self.currentTimeBetweenAttacks = self.currentTimeBetweenAttacks - deltaTime
    if self.currentTimeBetweenAttacks <= 0 then
        DCEI.CastAbilityAtPosition(GOBLIN_CHEF_ATTACK, self.unit, playerPosition.x, playerPosition.y)
        self.currentShotCount = self.currentShotCount - 1
        self.currentTimeBetweenAttacks = GOBLIN_CHEF_TIME_BETWEEN_ATTACKS
    end

    if self.currentShotCount < 0 then
        self.attackCooldownTimer = GOBLIN_CHEF_ATTACK_COOLDOWN
        self:SetEnemyState(0)
    end
end
function GoblinChef:UpdateEnemyStunned(deltaTime)
    self.stunTimer = self.stunTimer - deltaTime
    if self.stunTimer <= 0 then
        DCEI.RemoveBehavior(self.unit, ENEMY_STUNNED_BEHAVIOUR)
        self:SetEnemyState(0)
    end
end
function GoblinChef:LookAtPlayer(playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)

    local direction = mod.VectorSubtract(playerPosition, enemyPosition)
    local angle = math.deg(math.atan(direction.x, direction.y))

    DCEI.SetUnitRotationEuler(self.unit, 0, angle, 0)
end
function GoblinChef:FindRandomMoveBackPointAroundPlayer(playerPosition)
    local radius = GOBLIN_CHEF_MOVEBACK_DISTANCE
    local validPositions = {}

    for i = 0, 360 do
        local xPosition = radius * math.sin(math.rad(i)) + playerPosition.x
        local yPosition = radius * math.cos(math.rad(i)) + playerPosition.y

        if self.room.rect:contains(xPosition, yPosition) then
            table.insert(validPositions, { x = xPosition, y = yPosition })
        end
    end

    local randomIndex = math.random(1, #validPositions)
    local randomPosition = validPositions[randomIndex]

    return randomPosition
end
function GoblinChef:SetEnemyState(enemyState)
    self.enemyState = enemyState
end
function GoblinChef:GetMainUnit()
    return self.unit
end
function GoblinChef:CleanupEnemyDied()
    -- Do nothing here...
end
-- #endregion

-- #region Hob Goblin Enemy
local HobGoblin = {
    -- Units
    room = nil,
    unit = nil,
    
    enemyState = 0, -- 0: Targetting Movement, 1: Attack Waiting, 2: Stunned

    -- Attack
    attackWaitTimer = 0,

    -- Movement
    isMoving = false,

    -- Stunned
    stunTimer = 0
}
HobGoblin.__index = HobGoblin
function HobGoblin:new(room, xPosition, yPosition)
    local hobGoblin = {}
    setmetatable(hobGoblin, HobGoblin)

    local enemyUnit = DCEI.CreateUnit(-1, -1, GOBLIN_HOB, xPosition, yPosition)
    hobGoblin.room = room
    hobGoblin.unit = enemyUnit

    hobGoblin.enemyState = 0

    hobGoblin.attackWaitTimer = 0

    hobGoblin.isMoving = false

    hobGoblin.stunTimer = 0

    return hobGoblin
end
function HobGoblin:Update(deltaTime, playerPosition)
    if self.enemyState == 0 then
        self:TargetPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 1 then
        self:WaitAfterAttack(deltaTime, playerPosition)
    elseif self.enemyState == 2 then
        self:UpdateEnemyStunned(deltaTime)
    end
end
function HobGoblin:CheckAndActivateStunnedState(enemyUnit)
    if self.unit == enemyUnit then
        local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
        DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)

        self.stunTimer = GOBLIN_HOB_STUN_TIME
        self:SetEnemyState(2)

        return true
    end

    return false
end
function HobGoblin:TargetPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer > GOBLIN_HOB_MIN_CLOSEST_DISTANCE then
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
        self.isMoving = true
    else
        if self.isMoving then
            -- Basically stop the enemy when it gets too near
            local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
            DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)
            self.isMoving = false
        end
    end
    
    -- Switch to Attack State only when moving normally
    if distanceFromPlayer <= GOBLIN_HOB_ATTACK_RANGE and self.attackWaitTimer <= 0 then
        self.attackWaitTimer = 0
        self:AttackPlayer(deltaTime, playerPosition)
    end
end
function HobGoblin:WaitAfterAttack(deltaTime, playerPosition)
    self.attackWaitTimer = self.attackWaitTimer - deltaTime
    if self.attackWaitTimer <= 0 then
        self:SetEnemyState(0)
    end
end
function HobGoblin:AttackPlayer(deltaTime, playerPosition)
    self:LookAtPlayer(deltaTime, playerPosition) -- This is probably not required

    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    DCEI.CastAbilityAtPosition(GOBLIN_HOB_ATTACK, self.unit, enemyPosition.x, enemyPosition.y)

    self.attackWaitTimer = GOBLIN_HOB_ATTACK_WAIT_TIMER
    self:SetEnemyState(1)
end
function HobGoblin:UpdateEnemyStunned(deltaTime)
    self.stunTimer = self.stunTimer - deltaTime
    if self.stunTimer <= 0 then
        DCEI.RemoveBehavior(self.unit, ENEMY_STUNNED_BEHAVIOUR)

        self.attackWaitTimer = 0
        self:SetEnemyState(0)
    end
end
function HobGoblin:LookAtPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)

    local direction = mod.VectorSubtract(playerPosition, enemyPosition)
    local angle = math.deg(math.atan(direction.x, direction.y))

    DCEI.SetUnitRotationEuler(self.unit, 0, angle, 0)
end
function HobGoblin:SetEnemyState(enemyState)
    self.enemyState = enemyState
end
function HobGoblin:GetMainUnit()
    return self.unit
end
function HobGoblin:CleanupEnemyDied()
    -- Do nothing here...
end
--#endregion

-- #region Goblin Enemy
local Goblin = {
    -- Units
    room = nil,
    unit = nil,
    
    enemyState = 0, -- 0: Targetting Movement, 1: Attack Waiting, 2: Stunned

    -- Attack
    attackWaitTimer = 0,

    -- Movement
    isMoving = false,

    -- Stunned
    stunTimer = 0
}
Goblin.__index = Goblin
function Goblin:new(room, xPosition, yPosition)
    local goblin = {}
    setmetatable(goblin, Goblin)

    local enemyUnit = DCEI.CreateUnit(-1, -1, GOBLIN, xPosition, yPosition)
    goblin.room = room
    goblin.unit = enemyUnit

    goblin.enemyState = 0

    goblin.attackWaitTimer = 0

    goblin.isMoving = false

    goblin.stunTimer = 0

    return goblin
end
function Goblin:Update(deltaTime, playerPosition)
    if self.enemyState == 0 then
        self:TargetPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 1 then
        self:WaitAfterAttack(deltaTime, playerPosition)
    elseif self.enemyState == 2 then
        self:UpdateEnemyStunned(deltaTime)
    end
end
function Goblin:CheckAndActivateStunnedState(enemyUnit)
    if self.unit == enemyUnit then
        local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
        DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)

        self.stunTimer = GOBLIN_STUN_TIME
        self:SetEnemyState(2)

        return true
    end

    return false
end
function Goblin:TargetPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer > GOBLIN_MIN_CLOSEST_DISTANCE then
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
        self.isMoving = true
    else
        if self.isMoving then
            -- Basically stop the enemy when it gets too near
            local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
            DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)
            self.isMoving = false
        end
    end
    
    -- Switch to Attack State only when moving normally
    if distanceFromPlayer <= GOBLIN_ATTACK_RANGE and self.attackWaitTimer <= 0 then
        self.attackWaitTimer = 0
        self:AttackPlayer(deltaTime, playerPosition)
    end
end
function Goblin:WaitAfterAttack(deltaTime, playerPosition)
    self.attackWaitTimer = self.attackWaitTimer - deltaTime
    if self.attackWaitTimer <= 0 then
        self:SetEnemyState(0)
    end
end
function Goblin:AttackPlayer(deltaTime, playerPosition)
    self:LookAtPlayer(deltaTime, playerPosition) -- This is probably not required

    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    DCEI.CastAbilityAtPosition(GOBLIN_ATTACK, self.unit, enemyPosition.x, enemyPosition.y)

    self.attackWaitTimer = GOBLIN_ATTACK_WAIT_TIMER
    self:SetEnemyState(1)
end
function Goblin:UpdateEnemyStunned(deltaTime)
    self.stunTimer = self.stunTimer - deltaTime
    if self.stunTimer <= 0 then
        DCEI.RemoveBehavior(self.unit, ENEMY_STUNNED_BEHAVIOUR)

        self.attackWaitTimer = 0
        self:SetEnemyState(0)
    end
end
function Goblin:LookAtPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)

    local direction = mod.VectorSubtract(playerPosition, enemyPosition)
    local angle = math.deg(math.atan(direction.x, direction.y))

    DCEI.SetUnitRotationEuler(self.unit, 0, angle, 0)
end
function Goblin:SetEnemyState(enemyState)
    self.enemyState = enemyState
end
function Goblin:GetMainUnit()
    return self.unit
end
function Goblin:CleanupEnemyDied()
    -- Do nothing here...
end
--#endregion

mod.EnemyGoblinChef = GoblinChef 
mod.EnemyHobGoblin = HobGoblin
mod.EnemyGoblin = Goblin

mod.VectorDistance = nil
mod.VectorSubtract = nil
mod.LerpAngleDeg = nil
mod.NormalizeUnitRotation = nil
return mod