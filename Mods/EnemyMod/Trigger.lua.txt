-- Constants
local GOBLIN_CHEF = "_Enemy_GoblinChef"
local GOBLIN_CHEF_ATTACK = "_Enemy_GoblinChef_Attack"
local GOBLIN_CHEF_ATTACK_RANGE = 3
local GOBLIN_CHEF_TIME_BETWEEN_ATTACKS = 0.5
local GOBLIN_CHEF_SHOT_COUNT = 3
local GOBLIN_CHEF_ATTACK_COOLDOWN = 3
local GOBLIN_CHEF_MIN_CLOSEST_DISTANCE = 2.5

local GOBLIN_HOB = "_Enemy_Hobgoblin"
local GOBLIN_HOB_ATTACK = "_Enemy_Hobgoblin_Attack"
local GOBLIN_HOB_ATTACK_RANGE = 1
local GOBLIN_HOB_ATTACK_WAIT_TIMER = 1.5
local GOBLIN_HOB_MIN_CLOSEST_DISTANCE = 1

local mod = {}

-- #region Goblin Chef Enemy
local GoblinChef = {
    -- Units
    room = nil,
    unit = nil,
    
    enemyState = 0, -- 0: Targetting Movement, 1: Attacking

    -- Attack
    attackCooldownTimer = 0,
    currentTimeBetweenAttacks = 0,
    currentShotCount = 0,

    -- Rotation
    targetRotation = 0,
    currentRotation = 0,
    currentLerpAmount = 0
}
GoblinChef.__index = GoblinChef
function GoblinChef:new(room, xPosition, yPosition)
    local goblinChef = {}
    setmetatable(goblinChef, GoblinChef)

    local enemyUnit = DCEI.CreateUnit(-1, -1, GOBLIN_CHEF, xPosition, yPosition)
    goblinChef.room = room
    goblinChef.unit = enemyUnit

    goblinChef.enemyState = 0

    goblinChef.attackCooldownTimer = 0
    goblinChef.currentTimeBetweenAttacks = 0
    goblinChef.currentShotCount = 0

    goblinChef.targetRotation = 0
    goblinChef.currentRotation = 0
    goblinChef.currentLerpAmount = 0

    return goblinChef
end
function GoblinChef:Update(deltaTime, playerPosition)
    if self.enemyState == 0 then
        self:TargetPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 1 then
        self:AttackPlayer(deltaTime, playerPosition)
    end
end
function GoblinChef:TargetPlayer(deltaTime, playerPosition)
    self.attackCooldownTimer = self.attackCooldownTimer - deltaTime
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer > GOBLIN_CHEF_MIN_CLOSEST_DISTANCE then
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
    end

    -- Switch to Attack State only when moving normally
    if distanceFromPlayer <= GOBLIN_CHEF_ATTACK_RANGE and self.attackCooldownTimer <= 0 then
        self.currentShotCount = GOBLIN_CHEF_SHOT_COUNT
        self.currentTimeBetweenAttacks = 0
        self.attackCooldownTimer = 0

        local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
        DCEI.Move(self.unit, enemyPosition.x, enemyPosition.y)
        self:SetEnemyState(1)
    end
end
function GoblinChef:AttackPlayer(deltaTime, playerPosition)
    self:LookAtPlayer(playerPosition)

    self.currentTimeBetweenAttacks = self.currentTimeBetweenAttacks - deltaTime
    if self.currentTimeBetweenAttacks <= 0 then
        DCEI.CastAbilityAtPosition(GOBLIN_CHEF_ATTACK, self.unit, playerPosition.x, playerPosition.y)
        self.currentShotCount = self.currentShotCount - 1
        self.currentTimeBetweenAttacks = GOBLIN_CHEF_TIME_BETWEEN_ATTACKS
    end

    if self.currentShotCount < 0 then
        self.attackCooldownTimer = GOBLIN_CHEF_ATTACK_COOLDOWN
        self:SetEnemyState(0)
    end
end
function GoblinChef:LookAtPlayer(playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)

    local direction = mod.VectorSubtract(playerPosition, enemyPosition)
    local angle = math.deg(math.atan(direction.x, direction.y))

    DCEI.SetUnitRotationEuler(self.unit, 0, angle, 0)
end
function GoblinChef:SetEnemyState(enemyState)
    self.enemyState = enemyState
end
function GoblinChef:GetMainUnit()
    return self.unit
end
function GoblinChef:CleanupEnemyDied()
    -- Do nothing here...
end
-- #endregion

-- #region Hob Goblin Enemy
local HobGoblin = {
     -- Units
     room = nil,
     unit = nil,
     
     enemyState = 0, -- 0: Targetting Movement, 1: Attack Waiting
 
     -- Attack
     attackWaitTimer = 0,

     -- Rotation
    targetRotation = 0,
    currentRotation = 0,
    currentLerpAmount = 0
}
HobGoblin.__index = HobGoblin
function HobGoblin:new(room, xPosition, yPosition)
    local hobGoblin = {}
    setmetatable(hobGoblin, HobGoblin)

    local enemyUnit = DCEI.CreateUnit(-1, -1, GOBLIN_HOB, xPosition, yPosition)
    hobGoblin.room = room
    hobGoblin.unit = enemyUnit

    hobGoblin.enemyState = 0

    hobGoblin.attackWaitTimer = 0

    hobGoblin.targetRotation = 0
    hobGoblin.currentRotation = 0
    hobGoblin.currentLerpAmount = 0

    return hobGoblin
end
function HobGoblin:Update(deltaTime, playerPosition)
    if self.enemyState == 0 then
        self:TargetPlayer(deltaTime, playerPosition)
    elseif self.enemyState == 1 then
        self:WaitAfterAttack(deltaTime, playerPosition)
    end
end
function HobGoblin:TargetPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    local distanceFromPlayer = mod.VectorDistance(enemyPosition, playerPosition)

    if distanceFromPlayer > GOBLIN_HOB_MIN_CLOSEST_DISTANCE then
        DCEI.Move(self.unit, playerPosition.x, playerPosition.y)
    end
    
    -- Switch to Attack State only when moving normally
    if distanceFromPlayer <= GOBLIN_HOB_ATTACK_RANGE and self.attackWaitTimer <= 0 then
        self.attackWaitTimer = 0
        self:AttackPlayer(deltaTime, playerPosition)
    end
end
function HobGoblin:WaitAfterAttack(deltaTime, playerPosition)
    self.attackWaitTimer = self.attackWaitTimer - deltaTime
    if self.attackWaitTimer <= 0 then
        self:SetEnemyState(0)
    end
end
function HobGoblin:AttackPlayer(deltaTime, playerPosition)
    self:LookAtPlayer(deltaTime, playerPosition) -- This is probably not required

    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)
    DCEI.CastAbilityAtPosition(GOBLIN_HOB_ATTACK, self.unit, enemyPosition.x, enemyPosition.y)

    self.attackWaitTimer = GOBLIN_HOB_ATTACK_WAIT_TIMER
    self:SetEnemyState(1)
end
function HobGoblin:LookAtPlayer(deltaTime, playerPosition)
    local enemyPosition = DCEI.GetUnitPosition2D(self.unit)

    local direction = mod.VectorSubtract(playerPosition, enemyPosition)
    local angle = math.deg(math.atan(direction.x, direction.y))

    DCEI.SetUnitRotationEuler(self.unit, 0, angle, 0)
end
function HobGoblin:SetEnemyState(enemyState)
    self.enemyState = enemyState
end
function HobGoblin:GetMainUnit()
    return self.unit
end
function HobGoblin:CleanupEnemyDied()
    -- Do nothing here...
end

--#endregion

mod.EnemyGoblinChef = GoblinChef 
mod.EnemyHobGoblin = HobGoblin

mod.VectorDistance = nil
mod.VectorSubtract = nil
mod.LerpAngleDeg = nil
mod.NormalizeUnitRotation = nil
return mod